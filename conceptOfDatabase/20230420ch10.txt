날짜: 20230420
작성자: leeyou34
공부 범주:
    가. chapter 10 회복과 병행 제어
    
요약:


가. chapter 10: 회복과 병행 제어
    
            10-01: 트랜젝션
                1. 트랜잭션의 개념: 작업 하나를 수행하는 데 필요한 데이터베이스의 연산들을 모아 놓은 것으로, 데이터베이스에서 논리적인 작업의 단위가 된다.
                                   트랜잭션은 데이터베이스에 장애가 발생했을 때 데이터를 복구하는 작업의 단위도 된다.
                                   
                
                2. 트랜잭션의 특성: 트랜잭션의 네 가지 특성은 ACID(원자성, 일관성, 격리성, 지속성)으로 구성되어있다.
                  2-1. 원자성: 트랜잭션을 구성하는 연산들이 모두 정상적으로 실행되거나 하나도 실행되지 않아야 한다는 all-or nothing 방식을 의미한다.
                  2-2. 일관성: 트랜잭션이 성공적으로 수행된 후에도 데이터베이스가 일관된 상태를 유지해야 함영속성이라고도하며트랜을 의미한다.
                  2-3. 격리성: 현재 수행 중인 트랜잭션이 완료될 때까지 트랜잭션이 생성한 중간 연산 결과에 다른 트랜잭션들이 접근 할 수 없음을 의미한다.
                  2-4. 지속성: 영속성이라고도 하며, 트랜잭션이 성공적으로 완료 된 후, 데이터베이스에 반영한 수행 결과는 어떠한 경우에도 손실되지 않고 영구적이어야 한다.
                  
                  2-5. 트랜잭션의 특성을 지원하는 DBMS의 기능
                       트랜잭션의 특성 |  DBMS의 기능
                       원자성         <- 회복 기능
                       일관성         <- 병행 제어 기능
                       격리성         <- 병행 제어 기능
                       지속성         <- 회복 기능
                  
                 3. 트랜잭션의 연산
                        트랜잭션의 수행과 관련하여 주로 사용되는 연산에는 작업 완료를 의미하는 commit 연산과 작업 취소를 의미하는 rollback 연산이 있다.
                        
                 
                 4. 트랜잭션의 상태
                 
                        트랜잭션 수행 시작
                        |
                        
                        활동
                        
                        |             ㄱ
                     부분 완료  ->    실패
                     
                        |              |
                       완료           철회
            
    
            10-02: 장애와 회복
                    
                   트랜잭션의 특성을 보장하고, 데이터베이스를 모순이 없는 일관된 상태로 유지하기 위해 데이터베이스 관리 시스템은 회복 기능을 제공한다.
                   
                   1. 장애의 유형
                       
                       
                      트랜잭션 장애
                        의미: 트랜잭션 수행 중 오류가 발생하여 정상적으로 수행을 계속할 수 없는 상태
                        원인: 트랜잭션의 논리적 오류, 잘못된 데이터 입력, 시스템 자원의 과다 사용 요구, 처리 대상 데이터의 부재 등
                      
                      시스템 장애
                        의미: 하드웨어의 결함으로 정상적으로 수행을 계속할 수 ㅇ벗는 상태
                        원인: 하드웨어 이상으로 메인 메모리에 저장된 정보가 손실되거나 교착 상태가 발생한 경우 등                    
                      
                      미디어 장애
                        의미: 디스크 장치의 결함으로 디스크에 저장된 데이터베이스의 일부 혹은 전체가 손상된 상태
                        원인: 디스크 헤드의 손상이나 고장 등
                        
                    2. 데이터베이스의 저장 연산
                    
                        저장 장치              설명
                        휘발성 저장 장치       의미       장애가 발생하면 저장된 데이터가 손실됨
                        (소멸성)                예        메인 메모리 등
                        
                        비 휘발성 저장 장치    의미       장애가 발생해도 저장된 데이터가 손실되지 않음. 
                        (비 소멸성)                       단, 디스크 헤더 손상 같은 저장 장치 자체에 이상이 발생하면 데이터가 손실 될 수 있음
                                                예        디스크, 자기 테이프, CD/DVD 등
                        
                        안정 저장 장치         의미        비휘발성 저장 장치를 이용해 데이터 복사본 여러 개를 만드는 방법으로,
                                                           어떤 장애가 발생해도 데이터가 손실되지 않고 데이터를 영구적으로 저장 할 수 있
                                        

                     3. 회복 기법
                        회복은 데이터베이스에 장애가 발생했을 때 장애가 발생하기 전의 모순이 없고 일관된 상태로 복구시키는 것으로, 데이터베이스 관리 시스템에 있는
                        회복 관리자(recovery manager)가 담당한다.

                        3-1. 회복을 위한 연산
                             데이터를 별도의 장소에 미리 복사해두고, 장애로 문제가 발생했을 때 복사본을 이용해 원래의 상태로 복원한다.
                             덤프: 데이터베이스 전체를 다른 저장 장치에 주기적으로 복사하는 방법
                             로그: 데이터베이스에서 변경 연산이 실행될 떄마다 데이털ㄹ 변경하기 이전 ㄱ밧과 변경한 이후의 값을 별도의 파일에 실행하는 방법
                             
                             재실행: 가장 최근에 저장한 데이터베이스 복사본을 가져온 후 로그를 이용해 복사본이 반들어진 이후에 실행된 모든 변경 연산을 재실행하여
                                     장애가 발생하기 직전의 데이터베이스 상태로 복구(전반적으로 손상된 경우에 주로 사용)
                                     
                             undo: 로그를 이용해 지금까지 실행된 모든 변경 연산을 취소하여 데이터베이스를 우너래의 상태로 복구
                             
                        
                        3-2. 로그 회복 기법
                             로그를 이용한 회복 기법은 데이터를 변경한 연산 결과를 데이터베이스에 반영하는 시점에 따라
                             즉시 갱신 회복 기법과 지연 갱신 회복 기법으로 나누니다.
                             
                             즉시 갱신 회복 기법: 트랜잭션 수행 중에 데이터를 변경한 연산의 결과를 데이터베이스에 즉시 반영한다.
                                                  그리고 장애 발생에 대비하기 위해 데이터 변경에 대한 내용을 로그 파일에도 기록한다.
                                                  데이터베이스 회복 시 로그를 정상적으로 사용하려면, 트랜잭션에서 데이터 변경 연산이 실행되었을 때
                                                  로그 파일에 로그 레코드를 먼저 기록한 후 데이터베이스에 변경 연산을 반영해야 한다.
                                                  
                             
                             지연 갱신 회복 기법: 트랜잭션이 수행되는 동안에는 데이터 변경 연산의 결과를 데이터베이스에 즉시 반영하지 않고 로그 파일에만 기록해두었다가,
                                                 트랜잭션이 부분 완료된 후에 로그에 기록된 내용을 이용해 데이터베이스에 한 번에 반영한다. 트랜잭션이 수행되는 동안
                                                 장애가 발생할 경우 로그에 기록된 내용을 버리기만 하면 데이터베이스가 원래 상태를 그대로 유지하게 된다.
                                                 
                            
                             검사 시점 회복 기법: 로그 회복 기법과 같은 방법으로 로그 기록을 이용하되, 일정 시간 간격으로 검사 시점checkpoint를 만들어둔다.
                                                  그리고 장애가 발생하면 가장 최근 검사 시점 인전의 트랜잭션에는 회복 작업을 수행하지 않고,
                                                  이후의 트랜잭션에만 회복 작업을 수행한다.


                             미디어 회복 기법: 디스크에 발생할 수 있는 장애에 대비한 회복기법이다. 전체 데이터베이스의 내용을 일정 주기마다 다른 안전한 저장 장치에
                                               복사해두는 덤프를 이용한다. 디스크 장애가 발생하면 가장 최근에 복사해둔 덤프를 이용해 장애 발생 이전의 일관된
                                               데이터베이스 상태로 복구한다.

            10-03: 병행 제어
                    
                  1. 병행 수행과 병행 제어
                        데이터베이스 관리 시스템은 여러 사용자가 데이터베이스를 동시에 공유할 수 있도록 여러개의 트랜잭션이 동시에 수행되는 병행 수행(concurrency)를 지원.
                        병행 수행은 실제로 여러 트랜잭션이 차례로 번갈아 수행되는 인터리빙 방식으로 진행된다.
                        
                  2. 병행 수행의 문제
                        병행 수행을 특별한 제어 없이 진행하면 문제가 발생하며. 대표적인 문제는 하기와 같다.
                           2-1. 갱신 분실(lost update): 하나의 트랜잭션이 수행한 데이터 변경 연산의 결과를 다른 트랜잭션이 덮어써 변경 연산이 무효화 된다.
                           2-2. 모순성(inconsistency): 하나의 트랜잭션이 여러 개의 데이터 변경 연산을 실행할 때 
                                                       일관성 없는 상태의 데이터베이스에서 데이터를 가져와 연산을 실행함으로써 모순된 결과가 발생한 것이다.
                           2-3. 연쇄 복귀(cascading rollback): 트랜잭션이 완료되기 전에 장애가 발생하여 rollback 연산을 수행하면,
                                                               이 트랜잭션이 장애 발생 전에 변경한 데이터를 가져가 변경 연산을 실행한 또 다른 트랜잭션에도 rollback연산을
                                                               연쇄적으로 실행해야 한다는 것이다.
                   
                   3. 트랜잭션 스케쥴:
                        트랜잭션 스케쥴은 트랜잭션에 포함되어 있는 연산들을 수행하는 순서다.
                        일반적으로 하나의 트랜잭션에는 많은 연산들이 포함되어 있어 여러 트랜잭션을 병행 수행하는 경우 트랜잭션들의 각 연산을 실행시키는 순서인 트랜잭션
                        스케쥴도 여러 가지가 있을 수 있다.
                        
                            3-1. 직렬 스케쥴: 인터리빙 방식을 이용하지 않고 트랜잭션 별로 연산들을 순차적으로 실행시키는 것을 말한다.
                            3-2. 비직렬 스케쥴: 비직렬 스케쥴은 트랜잭션이 돌아가면서 연산들을 실행하기 떄문에 하나의 트랜잭션이 완료되기 전에
                                                다른 트랜잭션의 연산이 실행 될 수 있다.
                                                
                            3-3. 직렬 가능 스케쥴: 직렬 스케쥴에 따라 수행한 것과 같이 정확한 결과를 생성하는 비직렬 스케쥴이다.
                   
                   
                   4. 병행 제어 기법
                       병행 제어 기법은 트랜잭션을 병행 수행하면서도 정확한 결과를 얻을 수 있는 직렬 가능성을 보장받기 위해 사용한다.
                       병행 제어 기법의 기본 원리는 모든 트랜잭션이 따르면 직렬 가능성이 보장되는 나름의 규약을 정의하고, 트랜잭션들이 이 규약을 따르도록 하는 것이다.
                       
                       4-1. 로킹 기법의 개념: 병행 수행되는 트랜잭션들이 동일한 데이터에 동시에 접근하지 못하도록 lock과 unlock이라는 2개의 연산을 이용해 제어한다.
                                              로킹 기법의 기본 원리는 한 트랜잭션이 먼저 접근한 데이터에 대한 연산을 모두 마칠 떄까지, 해당 데이터에 다른 트랜잭션이
                                              접근하지 못하도록 상호 배제(mutual exclusion)하여 직렬 가능성을 보장하는 것이다.
                                              
                  
                       4-2. 2단계 로킹 규약: 기본 로킹 규약의 문제를 해결하고 트랜잭션의 직렬 가능성을 보장하기 위해
                                            lock과 unlock 연산의 수행 시점에 대한 새로운 규약을 추가한 것이 2단계 로킹 규약이다.
                                            트랜잭션 스케쥴의 모든 트랜잭션이 2단계 로킹 규약을 준수하면 해당 스케쥴은 직렬 가능성이 보장된다.
                       
                           확장단계: 트랜잭션이 lock 연산만 실행할 수 있고, unlock 연산은 실행할 수 없는 단계
                           축소단계: 트랜잭션이 unlock 연산만 실행할 수 있고, lock 연산은 실행할 수 없는 단계
                           
                           
