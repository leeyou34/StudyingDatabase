Date: 2023-05-04
Title: SQL 단일행 함수를 배웁시다.


함수란... 어떤 입력 값을 받아서 정해진 루틴에 의해 작업을 하고 결과값을 만들어서 출력해주는 것을 말한다.

  단일행 함수: 한번에 하나씩 처리하는 함수
  
  단일행 함수는 입력되는 데이터의 종류에 따라 아래와 같이 구분할 수 있다.
  
   
   
   단일행 함수
    |
    ㄴ        문자 함수
    |
    |
    ㄴ        숫자 함수
    |
    |
    ㄴ        날짜 함수
    |
    |
    ㄴ        변환 함수    
    |                      -    묵시적 데이터형 변환
    |                      ㄴ   명시적 데이터형 변환
    |                           
    ㄴ        일반 함수
              


1. 문자 함수

    1.1 INITCAP() 함수
    
    문법: INITCAP(문자열 또는 컬럼명)
    
    예시1: ename과 첫 글자만 대문자로 바꾼 ename을 출력
    
    SELECT ENAME, INITCAP(ename) "INITCAP" from emp WHERE deptno = 10;
    
    예시2: 중간에 공백이 있을 경우, 고백 다음을 첫 글자로 처리하여 대문자로 출력
    SELECT NAME, INITCAP(NAME) "INITCAP" FROM PROFESSOR WHERE DEPTNO = 101;

    
    1.2 LOWER() 함수
    함수에 입력되는 값을 전부 소문자로 변경하여 출력한다.
    
    문법: LOWER(문자열 또는 컬럼명)
    
    
    1.3 UPPER() 함수
    입력되는 값을 전부 대문자로 변경하여 출력
    
    예시1:
    select ename, LOWER(ename) "LOWER", UPPER(ename) "UPPER" from emp where deptno=10;
    
    
    1.4 LENGTH/ LENGTHB 함수
    입력된 문자열의 길이(바이트 수)를 계산해주는 함수이다.
    
    문법 LEGNTH(컬럼 또는 문자열) / LENGTHB(컬럼 또는 문자열)
    
    예시1:
    SELECT ename, LENGTH(ename) "LENGTH", LENGTHB(ename) "LENGTH" from emp where deptno = 20;
    -> 영문이라 값이 동일해 보인다.
    
    예시2:
    SELECT '서진수' "NAME", LENGTH('서진수') "LENGTH", LENGTHB('서진수') "LENGTHB" from dual;
    
    
    예시3: 회원 가입을 받을 때 사용자가 입력한 글자 수를 확인할 때 
    SET verify OFF
    SELECT ename, LENGTH(ename) from emp WHERE LENGTH(ename) > LENGTH('&ename');
    
    
    
    1.5 CONCAT() 함수(|| 연산자와 동일한 기능입니다)
    
    문법: CONCAT('문자열1', '문자열2')
    
    예시1:
    select CONCAT(ename, job) from emp where deptno=10;
    
    
    
    1.6 SUBSTR() 함수(아주 중요한 함수)
    
    문법:SUBSTR('문자열' 또는 컬럼명, 14)
    
    이 함수는 주어진 문자열에서 특정 길이의 문자만 골라낼 떄 사용하는 함수이다.
    
    예시1:
    select SUBSTR('abcde', 3,2) "3,2",
           SUBSTR('abcde',-3,2) "-3,2",
           SUBSTR('abcde',-3,4) "-3,4" From dual;
    
    마이너스가 있는 경우엔, 뒤에서부터(오른쪽)자릿수를 계산하여 문자를 추출한다.
    
    마이너스를 안할 경우 왼쪽 -> 오른쪽으로 검색
    
    마이너스가 붙을 경우 오른쪽에서 왼쪽으로 검색한 후, 왼쪽에서 오른쪽으로 글자 수를 세어낸다.
    
    
    예시2:
    student 테이블에서 jumin 컬럼을 이용하여 1전공이 101번인 학생들의 이름과 태어난 월일, 생일 하루 전 날짜를 출력하세요.
    select name, SUBSTR(jumin,3,4) "Birthday",
                 SUBSTR(jumin,3,4) -1 "Birthday -1"
                 From student
                 where deptno1 = 101;


    1.7 SUBSTRB()함수
    SUBSTR 함수와 문법은 동일하며, 차이점은 추출할 자릿 수가 아니라 추출할 바이트 수를 지정하는 것이다.
    
    예시1:
    SELECT '서진수' "NAME" , SUBSTR('서진수', 1,2) "SUBSTR",
                             SUBSTRB('서진수',1,2) "SUBSTRB"
                             from dual;
    
    
    1.8 INSTR()함수
    주어진 문자열이나 컬럼에서 특정 글자의 위치를 찾아주는 함수이다.
    
    문법: INSTR('문자열' 또는 컬럼, 찾는 글자, 시작 위치, 몇 번째인지(기본 값은 1))
    
    예시1:
    SELECT 'A-B-C-D', INSTR('A-B-C-D', '-', 1,3) "INSTR" from dual;
    ->INSTR가 6 나옴
    SELECT 'A-B-C-D', INSTR('A-B-C-D', '-', 3,1) "INSTR" from dual;
    ->INSTR가 4 나옴
    SELECT 'A-B-C-D', INSTR('A-B-C-D', '-', -1,3) "INSTR" from dual;
    ->INSTR가 2 나옴
    
    
    1.9 LPAD() 함수
    PAD라는 말은 채운다. LPAD는 왼쪽에 채운다.
    
    예제1
    student table에서 1전공이 201번인 학과 학생들의 id를 총 10자리로 출력하되 왼쪽 빈자리는 '*'기호로 채워라
    
    col name for a20
    col id for a10
    col lpad(id,10,'*') for a20
    select name, id, LPAD(id,10,'*') from student where deptno1 = 201;
    
    
    퀴즈1
    emp 테이블을 사용하여 아래 화면과 같이 deptno가 10번인 사원들의 사원 이름을 총 9바이트로 출력하되 빈자리에는 해당 자리의 숫자로 채워라.
    
    select ename, LPAD(ename, 9, '123456789') from emp where deptno=10;
    
    
    
    1.10 RPAD()함수
    
    문법: RPAD('문자열' 또는 컬럼명, 자릿수, '채울 문자')
    
    emp 테이블에서 아래와 같이 deptno가 10번인 사원들의 ename을 10자리로 출력하되 오른쪽 빈자리에는 '-'로 채우세요.
    
    select ename, RPAD(ename, 10, '-') from emp where deptno=10;
    
    
    퀴즈1
    아래 화면과 같이 emp테이블에서 deptno가 10번인 사원들의 이름을 총 9자리로 출력하되 오른쪽 빈자리에는 래당 자릿수에 해당되는 숫자가 출력되게 해라
    
    select ename, RPAD(ename, 9, SUBSTR('234567890', LENGTHB(ename), 10-LENGTHB(ename))) from emp where deptno=10;
    
    
    1.11 LTRIM() 함수
    
    LPAD, RPAD 함수가 채우는 함수였다면 LTRIM, RTRIM 함수는 제거하는 함수이다.
    
    LTRIM('문자열' 또는 컬럼명, '제거할 문자')
    
    예제1:
    emp 테이블에서 ename 이 'C'로 시작하는 사람의 이름에서 'C'를 제거하고 출력하는 화면입니다.
    
    -> 변경 전
    SELECT ename, from emp where deptno =10; 
    
    -> 변경 후
    select LTRIM(ename, 'C') from emp where deptno = 10;
    
    
    
    1.12 RTRIM() 함수
    
    emp 테이블에서 'R'로 끝나는 사람의 이름에서 'R'을 제거하고 출력하는 화면
    select RTRIM(ename, 'R') from emp where deptno = 10;
    
    
    1.13 Replace() 함수
    
    문법: Replace('문자열' 또는 컬럼명, '문자1', '문자2')
    
    예제1:
    select ename, replace(ename, SUBSTR(ename, 1, 2), '**') "Replace" from emp where deptno = 10;
    
   
    퀴즈1:
    select ename, replace(ename, SUBSTR(ename,2,2), '--') "Replace" from emp where deptno = 20;
    
    
    퀴즈2:
    select name, jumin, replace(jumin, SUBSTR(jumin, 7, 7),'-/-/-/-') "Replace" from student where deptno1=101;
    
    
    퀴즈3:
    select name, tel, replace(tel, SUBSTR(tel,5, 3), '****') "Replace" from student where deptno1=102;
    
    
    퀴즈4:
    select name, tel, replace(tel, SUBSTR(tel, 9, 4), '****') "Replace" from student where deptno1=101;
    
    
    
    2. 숫자 관련 함수들
    숫자 함수란 함수에 입력되는 값이 숫자인 함수를 말하며 아래와 같은 종류가 있다.
    
    
    2.1 ROUND() 함수
    
    문법: ROUND(숫자, 출력을 원하는 자릿수)
    
    예제1:
    SELECT ROUND(987.654,2) "ROUND1"
         , ROUND(987.654,0) "ROUND2"
         , ROUND(987.654,-1) "ROUND3"
         From dual;
    
    
    2.2 TRUNC() 함수
    
    문법: TRUNC(숫자, 원하는 자릿수)
    
    예제1:
    SELECT TRUNC(987.654,2) "TRUNC1"
         , TRUNC(987.654,0) "TRUNC2"
         , TRUNC(987.654,-1) "TRUNC3"
        FROM dual; 


    2.3 MOD(), CEIL(), FLOOR() 함수
    
    MOD 함수는 나머지 값을 구하는 함수이다
    CEIL 함수는 주어진 숫자가 가장 가까운 큰 정수를 구하는 함수
    FLOOR 함수는 주어진 함수와 가장 가까운 작은 정수를 구하는 함수
    
    예시1:
    SELECT MOD(121,10) "MOD"
          , CEIL(123,45) "CEIL"
          , FLOOR(123,45) "FLOOR"
          FROM dual;
          
    
    예시2:
    SELECT rownum "ROWNO", CEIL(rownum/3) "TEAMNO", ename from emp;
    
    
    
    2.4 POWER() 함수
    이 함수는 숫자 1과 숫자 2의 승수를 구해주는 함수
    
    SELECT POWER(2,3) FROM DAUL;
    
    
    
    
    
    3. 날짜 관련 함수들
    
    3.1 SYSDATE 함수
    

    예시1:
    SELECT SYSDATE FROM DUAL;
    
    
    -> 리눅스용 오러클에서는 날짜 체계가 미국을 기준으로 되어있어, 한국에서 익숙한 형태로 표기하기 위해서 다음과 같은 쿼리를 작성한다.
    SELECT SYSDATE FROM DUAL;
    
    ALTER SESSION SET NLS_DATE_FORMAT='RRRR-MM-DD:HH24:MI:SS';
    
    SELECT SYSDATE FROM DUAL;
    
    
    3.2 MONTHS_BETWEEN 함수
    이 함수는 두 날짜를 입력받아 두 날짜 사이의 개월 수를 출력하는 함수이다.
    
    SELECT MONTHS_BETWEEN('13/09/30', '14/08/31') from dual;
    
    ->단 여기에는 문제가 있다. 윤일 그리고 어떤 개월은 30일 또는 31일이라는 점에서 오차가 발생한다.
      MONTHS_BETWEEN 함수는 1개월을 약 31로 계산한다. 그래서 예시로...
      
    SELECT ename, hiredate, ROUND(MONTHS_BETWEEN(TO_DATE('04/05/31'),hiredate),1) "DATE1" , ROUND(((TO_DATE('04/05/31')-hiredate)/31),1) "DATE2" from emp where deptno=10;
    
    
    3.3 ADD_MONTHS() 함수
    ADD_MONTHS 함수는 주어진 날짜에 숫자만큼의 달을 추가하는 함수이다.
    
    예시1:
    SELECT SYSDATE, ADD_MONTHS(SYSDATE,1) from dual;
    
    
    
    3.4 NEXT_DAY() 함수
    주어진 날짜를 기준으로 돌아오는 가장 최근 요일의 날짜를 반환해주는 함수
    
    SELECT SYSDATE, NEXT_DAY(SYSDATE, 'MON') FROM dual;
    -> 에러가 뜨니 하기와 같이 다시 재 타입할 것
    SELECT SYSDATE, NEXT_DAY(SYSDATE, '월') FROM dual;
    
    
    
    3.5 LAST_DAY() 함수
    LAST_DAY 함수는 주어진 날짜가 속한 달의 가장 마지막 날을 출력해주는 함수입니다.
    
    SELECT SYSDATE, LAST_DAY(SYSDATE), LAST_DAY('14/05/01') from dual;
    
    
    
    3.6 날짜의 ROUND(), TRUNC()함수
    날짜의 ROUND는 하루의 반에 해당되는 시간이 정오 가 넘어 갈 경우, 다음 날짜로 출력하고
    이시간이 안될경우 TRUNC 함수는 무조건 당일로 출력한다.
    
    예시1:
    SELECT SYSDATE, ROUND(SYSDATE), TRUNC(SYSDATE) from dual;
    round는 다음날을 불러왔고, Trunc는 지금을 불러왔다. (정오 시간 지금 지났음)
    
    
    
    
    4. 형 변환 함수
    오라클이란 프로그램은 우리가 일상생활에서 사용하는 데이터들을 컴퓨터로 옮겨서 저장하고 관리 해 주는 프로그램이다.


    4.1 묵시적(자동)형 변환과 명시적(수동)형 변환
    
    오라클에서 형 변환은 묵시적(자동) 형 변환과 명시적(수동) 형 변환으로 나뉜다.
    
    예시1:
    select 2 + '2' from dual;
    -> 위의 ' '는 문자로 인식해주는 기능을 가지고 있지만, 따옴표 내에 문자가 숫자이면 자동으로 인식하여
       숫자로 자동 형 변환을 한다.
      (Select 2 + TO_NUMBER('2') from dual;)
      
      하지만, 실제로 문자가 따옴표 내에 있을 경우 묵시적 형 변환은 일어나지 않는다.
      
    예시2:
    select 2 + 'A' from dual;
    
    
    4.2.TO_CHAR 함수 (날짜 -> 문자로 형 변환하기)
    
    문법: TO_CHAR(원래 날짜, '원하는 모양')
    
    예시1:
    SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY') "YYYY"
                  , TO_CHAR(SYSDATE, 'RRRR') "RRRR"
                  , TO_CHAR(SYSDATE, 'YY') "YY"
                  , TO_CHAR(SYSDATE, 'RR') "RR"
                  , TO_CHAR(SYSDATE, 'YEAR') "YEAR"
                  FROM DUAL;
    
   
   예시2:
   SELECT SYSDATE, TO_CHAR(SYSDATE, 'MM') "MM"
                 , TO_CHAR(SYSDATE, 'MON') "MON"
                 , TO_CHAR(SYSDATE, 'MONTH') "MONTH"
                 FROM dual;
    
    
   예시3:
   SELECT SYSDATE, TO_CHAR(SYSDATE, 'DD') "DD"
                 , TO_CHAR(SYSDATE, 'DAY') "DAY"
                 , TO_CHAR(SYSDATE, 'DDTH') "DDTH"
                 FROM dual;
                 
   
   예시4:
   SELECT SYSDATE, TO_CHAR(SYSDATE, 'RRRR-MM-DD:HH24:MI:SS')
                  FROM dual;
                  
   
   
   
   형 변환 함수 퀴즈: 날짜 변환하기 1
   
   student table의 birthday 컬럼을 사용하여 생일이 1월인 학생의 이름과 birthday를 아래 화면과 같이 출력하세요.
   -> 변경 전
   select studno, name, birthday from student;
   
   -> 변경 후
   select studno, name, TO_CHAR(birthday, 'DD-MON-YY') from student where TO_CHAR(birthday, 'MM') =01;
   
   
   
   형 변환 함수 퀴즈: 날짜 변환하기 2
   
   emp 테이블의 hiredate 컬럼을 사용하여 입사일이 1, 2, 3월인 사람들의 사번과 이름, 입사일을 출력하세요.
   
   ->
   select empno, ename, TO_CHAR(hiredate, 'YY/MM/DD') from emp where TO_CHAR(hiredate, 'MM') <=03;
   
   
   
   
   4.3 TO_CHAR 함수(tntwkgud - 문자형으로 변환하기
   
   예시1:
   emp 테이블을 조회하여 이름이 'ALLEN'인 사원의 사번과 이름과 연봉을 출력하세요. 단, 연봉은 (sla * 12) + comm로 계산하고 천 단위 구분 기호로 표시하세요.
   
   ->
   select empno, ename, sal, comm, TO_CHAR((SAL*12)+comm, '999,999') "SALARY" from emp where ename = 'ALLEN';
   
   
   예시2:
   professor 테이블을 조회하여 201번 학과에 근무하는 교수들의 이름과 급여, 보너스, 연봉을 아래와 같이 출력하세요. 단 연봉은 (pay*12)+bonus로 계산합니다.
   
   select name, pay, bonus, TO_CHAR((PAY*12)+bonus, '999,999') "TOTAL" from professor where deptno = 201;



  형 변환 함수 퀴즈3
  emp 테이블을 조회하여 comm 값을 가지고 있는 사람들의 empno, ename, hiredate, 총 연봉, 15% 인상 후 연봉을 아래 화면처럼 출력하라. 단 총 연봉은 (sal * 12) + comm으로 계산하고 아래 화면에서는 SAL로 출력되었으며 15% 인상한 값은 총 연봉의 15% 인상 값입니다. (HIREDATE 컬럼의 날짜 형식과 SAL 컬럼, 15% UP 컬럼의 $ 표기와 기호가 나오게 하라)
  
  select empno, ename, hiredate, TO_CHAR((sal * 12) + comm, '999,999') "SAL", TO_CHAR(((sal*12)+comm)*1.15, '999,999') "15% UP SAL" from emp where comm is not null;
  
  
  
  4.4 TO_NUMBER() 함수
  이 함수는 숫자가 아닌 숫자처럼 생긴 문자를 숫자로 바꾸어 주는 함수이다.
  
  문법: TO_NUMBER('숫자처럼 생긴 문자')
  
  SELECT TO_NUMBER('5') from dual;
  ->
  SELECT ASCII('A') from dual;
  -> 문자를 숫자로 출력을 원한다면 ASCII 코드로 사용해서 값을 출력한다.
  
  
  
  
  4.5 TO_DATE() 함수
  이 함수는 날짜가 아닌 날짜처럼 생긴 문자를 날짜로 바꿔 주는 함수이다.
  
  select TO_DATE('2014/05/31') from dual;
  
  
  
  
  5. 일반 함수
  
  5.1 NVL() 함수: NULL 값을 만나면 다른 값으로 치환해서 출력하는 함수
  
  문법: NVL(컬럼, 치환할 값)
  
  NVL(sal, 0) -> sal 컬럼의 값이  null 인 경우 null eotls 0 으로 치환하라
  NVL(sal, 100) -> sal 컬럼의 값이 null일 경우 null 대신 100으로 치환하라.
  
  예시1:
  SELECT ename, comm, NVL(comm, 0), NVL(comm,100) from emp where deptno =30;
  
  
  more... 치환 값이 문자일 경우
  NVL(position, '사원') -> position 값이 null일 경우 '사원'으로 치환하라.
  
  치환 값이 날짜일 경우
  NVL(hiredate,'2014/05/01') -> hiredate 값이 없을 경우 '2014/05/01' 날짜로 치환하라.
  
  
  NVL 함수 퀴즈
  Porfessor 테이블에서 201번 학과 교수들의 이름과 급여, bonus, 총 연봉을 아래와 같이 출력하라.
  단, 총 연봉은 (pay * 12 + bonus)로 계산하고 bonus 없는 교수는 0으로 계산하세요.
  
  ->
  select name, pay, NVL(bonus, 0) "bonus", TO_CHAR((pay * 12)+NVL(bonus,0), '999,999') "TOTAL" from professor;
  
  
  
  5.2 NVL2() 함수
  
  문법: NVL2(COL1, COL2, COL3)
  의미: col1의 값이 NULL이 아니면 col2를, NULL이면 col3를 출력합니다.
  
  예시1:
  emp 테이브레서 deptno가 30번인 사람들의 empno, sal, comm 값을 출력하되 만약 comm 값이 null이 아니면
  sal + comm 값을 출력하고 comm 값이 null 이면 sal * 0의 값을 출력하세요.
  
  select empno, sal, NVL2(comm, sal+comm, sal * 0) from emp where deptno='30';
  
  
  
  NVL2 함수 퀴즈
  
  아래 화면과 같이 emp 테이블에서 deptno가 30번인 사원들을 조회하여 comm 값이 있을 겨우 'Exist'을 출려갛고 
  comm 값이 null 일 경우 'NULL'을 출력하세요.
  
  select empno, ename, comm, NVL2(comm, 'Exist', 'NULL') "NVL2" from emp where deptno =30;
  
  
  5.3 Decode() 함수
  Decode 함수는 일반 개발 언어 등에서 사용 중인 분기문인 IF문을 오라클 SQL 안으로 가져온 함수이다.
  
  DECODE 함수는 오라클에서만 사용되는 함수로 IF문을 사용해야 하는 조건문을 처리할 수 있다.
  
  유형1- A가 B일 경우 '1'을 출력하는 경우
  DECODE(A, B, 1, NULL)
  
  
  유형1예제: professor 테이블에서 학과번호와 교수명, 학과명을 출력하되 deptno가 101번인 교수만 학과명을
            "Computer engineering"으로 출력하고 101번이 아닌 교수들은 학과명ㅇ에 아무것도 출력하지 마세요
            
            select deptno, name, DECODE(deptno, 101, 'Computer Engineering') "DNAME" from professor;

  
  유형2- A가 B일 경우 '1'을 출력하고 아닐 경우 '2'를 출력하는 경우
  DECODE(A,B, '1', '2')
  
  
  유형2예제: professor 테이블에서 학과번호와 교수명, 학과명을 출력하되 deptno가 101번인 교수만 학과명을
            "Computer engineering"으로 출력하고 101번이 아닌 교수들은 학과명에 ETC라고 출력하세요.
            
            select deptno, name, DECODE(deptno, 101, 'Computer Engineering', 'ETC') "DNAME" from professor;
  
  
  유형3예제: professor 테이블에서 학과번호와 교수명, 학과명을 출력하되 deptno가 101번인 교수만 학과명을
            "Computer engineering"으로 출력하고 102번이면 'Multimedia Engineering', 103번이면 'Software Engineering 이라고 출력하세요.
            
            
            select deptno, name, DECODE(deptno, 101, 'Computer Engineering', 102, 'Multimedia Engineering', 103, 'Software Engineering', 'ETC') "DNAME" from professor;
            
            
 유형4예제: A가 Bㅣㄹ 경우 중에서 C가 D를 만족하면 '1'을 출력하고 C가 D가 아닐 경우 NULL을 출력하는 경우
 
DECODE(A,B, DECODE(C,D, '1', null))
 
 professor 테이블에서 교슈의 이름과 부서번호를 출력하고 101번 부서 중에서 이름이 "Audie Murphy" 교수에게
 "BEST!"라고 출력하고 101번 부서 중에서 이름이 "Audie Murphy"가 아닌 나머지에는 NULL ㅏㄱㅄ을 출력 하세요
 만약 101번 외 다른 학과에 "AUdie MUurphy 교수가 있어도 "BEst!'가 출려되면 안됩니다.
 
 select deptno, name, DECODE(deptno, 101, DECODE(Name, 'Audie Murphy', 'BEST!')) "ETC" from professor;
 
 
 
 유형5예제: A가 B일 경우 중에서 C가 D를 만족하면 '1'을 출력하고 C가 D가 아닐 경우 '2'를 출력하는 경우
 
 DECODE(A, B, DECODE(C,D, '1', '2'))
 
 professor 테이블에서 교수의 이름과 부서번호를 출력하고 101번 부서 중에서 이름이 "Audie Murphy" 교수에게
 "BEST!"라고 출력하고 101번 부서 중에서 이름이 "Audie Murphy"가 아닌 나머지 교수에는 GOOD을 출력 하세요
 만약 101번 교수가 아닐 경우 비고란이 공란이 되도록 출력하라
 
 select deptno, name, DECODE(deptno, 101, DECODE(name, 'AUdie Murphy', 'Best!', 'Good!')) "ETC" from professor;
 
 
 유형6 예제: A가 B일 경우 중에서 C가 D를 만족하면 '1'을 출력하고 C가 D가 아닐 경우 '2'를 출력하고 
             A가 B가 아닐 경우 '3'을 출력하는 경우
             
 
 professor 테이블에서 교수의 이름과 부서번호를 출력하고 101번 부서 중에서 이름이 "Audie Murphy" 교수에게
 "BEST!"라고 출력하고 101번 부서 중에서 이름이 "Audie Murphy"가 아닌 나머지 교수에는 GOOD을 출력 하세요
 만약 101번 교수가 아닐 경우 비고란이 "N/A"이 되도록 출력하라
 
 select deptno, name, DECODE(deptno, 101, DECODE(name, 'Audie Murphy', 'Best!', 'Good!'), 'N/A') "ETC" from professor;
 
 
 DECODE quiz 1
 
 student 테이블을 사용하여 제1전공(deptno1)이 101번인 학과 학생들의 이름과 주민번호, 성별을 출력하되 서별은 주민번호(jumin) 컬럼을 이용하여 7번째 숫자가 1일 경우 "MAN", 2일 경우 "WOMAN"으로 출력하세요.
 
 
 select name, jumin, DECODE(SUBSTR(jumin, 7, 1), '1', 'MAN', '2', 'WOMAN') "gender" from student where deptno1=101;
 
 
 DECODE quiz 2
 
 select name, tel, DECODE(SUBSTR(TEL,1,3), '02)', 'SEOUL', '031', 'GYEONGGI', '051', 'BUSAN', '052', 'ULSAN', '055', 'GYEONGNAM') "LOC" from student where deptno1=101;
 
 
 
5.4 CASE 문

문법: CASE 조건 WHEN 결과1 THEN 출력1 [WHEN 결과 2 THEN 출력2] ELSE 출력3 END "컬럼명"

이 문법에서 주의사항은 DECODE 함수의 경우에는 함수 내부에 ,(comma)로 저근드링 구분되었으나 CASE 표현식 내부는 콤마가 사용되지 않는다.

예시1
student 테이블을 참조하여 deptno1이 201번인 학생의 이름과 전화번호, 지역명을 출력하세요.
단, 지역번호가 02면 "SEOUL", 031이면 "GYEONGGI", 051이면 "BUSAN", 052이면 "ULSAN", 055이면
"GYEONGNAM", 나머지는 "ETC"로 표시하세요.

select name, tel
      , CASE(SUBSTR(tel,1, INSTR(tel,')')-1)) WHEN '02' THEN 'SEOUL'
                                              WHEN '031' THEN 'GYEONGGI'
                                              WHEN '051' THEN 'BUSAN'
                                              WHEN '052' THEN 'ULSAN'
                                              WHEN '055' THEN 'GYEONGNAM'
                                                         ELSE 'ETC'
      END "LOC"
      From student where deptno1=201;
      
      
비교조건이 '=' 아닌 경우
student 테이블의 jumin 컬럼을 참조하여 학생들의 이름과 태어난 달, 그리고 분기를 출력하라
태어난 달이 01~03월은 1/4, 04~06월은 2/4, 07~09월은 3/4, 10~12월은 4/4로 출력하세요.



select name, SUBSTR(jumin, 3, 2) "MONTH"
       , CASE WHEN SUBSTR(jumin, 3,2) BETWEEN '01' AND '03' THEN '1/4'
            WHEN SUBSTR(jumin, 3,2) BETWEEN '04' AND '06' THEN '2/4'
            WHEN SUBSTR(jumin, 3,2) BETWEEN '07' AND '09' THEN '3/4'
            WHEN SUBSTR(jumin, 3,2) BETWEEN '10' AND '12' THEN '4/4'
       END "QUARTER"
 FROM student;
 
 
 
 CASE문 퀴즈
 emp테이블을 조회하여 empno, ename, sal, LEVEL(급여등급)을 아래와 같이 출력하세요. 단, 급여등급은 sal을 기준으로 1-1000이면 Level1,  1001-2000이면 Level2, 2001-3000이면 level3, 3001-4000이면 level4, 4001보다 많으면 LEVEL5로 출력하세요.
 
 /** 잘못된 답
 select empno, ename, sal, SUBSTR(sal, 1, 4) "LEVEL"
      , CASE WHEN SUBSTR(sal, 1,4) BETWEEN '0001' AND '1000' THEN 'LEVEL1'
             WHEN SUBSTR(sal, 1,4) BETWEEN '1001' AND '2000' THEN 'LEVEL2'
             WHEN SUBSTR(sal, 1,4) BETWEEN '2001' AND '3000' THEN 'LEVEL3'
             WHEN SUBSTR(sal, 1,4) BETWEEN '3001' AND '4000' THEN 'LEVEL4'
                                                             ELSE 'LEVEL5'
      END "LEVEL"
      FROM emp;
 **/
      
     /** 잘못된 답
     select empno, ename, sal
      , CASE WHEN SUBSTR(sal, 1,4) BETWEEN '001' AND '1000' THEN 'LEVEL1'
             WHEN SUBSTR(sal, 1,4) BETWEEN '1001' AND '2000' THEN 'LEVEL2'
             WHEN SUBSTR(sal, 1,4) BETWEEN '2001' AND '3000' THEN 'LEVEL3'
             WHEN SUBSTR(sal, 1,4) BETWEEN '3001' AND '4000' THEN 'LEVEL4'
                                                             ELSE 'LEVEL5'
      END "LEVEL"
      FROM emp;
      **/
      
      select empno, ename, sal, case when SUBSTR(sal, 1,4) <= 1000 Then 'level1'
                                   when SUBSTR(sal, 1,4) <= 2000 Then 'level2'
                                   when SUBSTR(sal, 1,4) <= 3000 Then 'level3'
                                   when SUBSTR(sal, 1,4) <= 4000 Then 'level4'
                                                                 ELSE 'level5'
                                       END "Level"
                       from emp;


    6. 정규식 (Regular Expression) 함수로 다양한 조건 조회하기
    
    예시1:
    select * from t_reg;
    
    
    6.1 REGEXP_LIKE 함수
    예제1:
    
    select * from t_reg
      where REGEXP_LIKE(text, '[a-z]');
    -> 소문자만 출력
    
    
    예제1-1:
    select * from t_reg
    where REGEXP_LIKE(text, '[a-zA-Z]');
    ->대문자도 포함하여 출력
    
    
    예제2: 소문자로 시작하고 공백을 포함하는 경우 출력
    select * from t_reg
    where REGEXP_LIKE(text, '[a-z] ');
    ->소문자로 시작하고 공백이 있는 행 다 찾으라
    
    예제2-1:
    select * from t_reg
    where REGEXP_LIKE(text, '[a-z] [0-9]');
    ->소문자로 시작하고 공백이 있으며 숫자로 끝나는 행을 찾아라.
    
    예제2-2:
    select * from t_reg
    where REGEXP_LIKE(text, '[[:space:]]');
    -> 공백이 있는 행을 찾고 싶으면 
    
    
    예제3: 연속적인 글자 수 지정하기
    select * from t_reg
    where REGEXP_LIKE(text, '[A-Z]{2}');
    -> 대문자가 2번 연속으로 나오는 행 출력
    
    예제3-1: 
    select * from t_reg
    where REGEXP_LIKE(text, '[A-Z]{3}');
    -> 대문자가 3번 연속으로 나오는 행 출력
    
    
    예제3-2:
    select * from t_reg
    where REGEXP_LIKE(text, '[A-Z]{4}');
    -> 대문자가 4번 연속으로 나오는 행 출력 
    
    
    예제3-3
    select * from t_reg
    where REGEXP_LIKE(text, '[0-9]{3}');
    
    예제3-4
    select * from t_reg
    where REGEXP_LIKE(text, '[A-Z][0-9]{3}');
    
    예제3-5
    select * from t_reg
    where REGEXP_LIKE(text, '[0-9][A-Z]{3}');
    -> 숫자부터 검색하는데, 숫자로 시작하는 레코드가 없다.
    
    예제3-6:
    select * from t_reg
    where REGEXP_LIKE(text, '[[:upper:]]');
    
    
    예제4: 특정 위치를 지정하여 출력하기
    시작되는 문자를 지정할 때는 ^(캐럿)문자를 사용하고 끝나는 문자를 지정할 땐 $(달러) 문자를 사용하면 검색을 쉽게 할 수 있다.
    
    예시4-1
    select * from t_reg
    where REGEXP_LIKE(text, '^[A-Za-z]');
    -> 첫 시작을 대문자나 소문자로 하는 행을 모두 출력
      단, 대문자 먼저 출력한다.
    
    예시4-2
    select * from t_reg
    where REGEXP_LIKE(text, '^[0-9A-Z]');
    -> 첫 시작을 숫자나, 대문자로 시작하는 행 모두 출력
      단, 대문자 먼저 출력한다.
      
    
    예시4-3
    select * from t_reg
    where REGEXP_LIKE(text, '^[a-z]|[0-9]');
    -> 이 화면은 소문자로 시작하거나 숫자로 시작하는 화면을 출력하는 예이다.
    
    
    예시4-4: student 테이블에서 학생의 id 중, 첫글자가 M으로 시작하고 두번쨰 글자가 a 또는 o가 나오는 아이디 출력하라
    select name, id from student
    where REGEXP_LIKE(id, '^M(a|o)');
    
    
    예시4-5: 
    select * from t_reg
    where REGEXP_LIKE(text, '[a-zA-Z]$');
    -> $문자를 사용하여 소문자로 끝나는 행 출력
    
    
    예시4-6:
    select * from t_reg
    where REGEXP_LIKE(text, '[[:alpha:]]$');
    -> 4-6 예제는 4-5와 동일하다.
    
    
    예시4-7: 소문자로 시작하지 않는 행을 보여주어라
    select * from t_reg
    where REGEXP_LIKE(text, '^[^a-z]');
    
    
    예시4-8: 숫자로 시작하지 않는 행들을 보여달라.
    select * from t_reg
    where REGEXP_LIKE(text, '^[^0-9]');
    
    
    예시4-9: 
    select * from t_reg
    where REGEXP_LIKE(text, '^[^0-9a-z]');
    
    
    예시4-10: 소문자가 들어가 있는 모든 행을 제거하고 싶을 떄
    select * from t_reg
    where NOT REGEXP_LIKE(text, '^[a-z]');
    
    예시4-11: student table에서 지역번호가 2자리이고 그 다음 국번이 연속적으로 4자리가 나오는 값 출력
    select name, tel from student
    where REGEXP_LIKE(tel, '^[0-9]{2}\)[0-9]{4}');
    
    
    예시4-12: student 테이블에서 학생의 id를 조사해서 4번쨰 자리에 r(소문자) 이 있는 행을 출력
    select name, id
    from student
    where REGEXP_LIKE(id, '^...r.');
    
    
    예시4-13: t_reg2 테이블에서 ip 주소가 10.10.10.1 행만 출력
    select * from t_reg2
    where REGEXP_LIKE(ip, '^[10]{2}\.[10]{2}\.[10]{2}\.[1]');
    
    
    예시4-14: 172.16.168.xxxip를 출력하고 싶다면.
    select * from t_reg2
    where REGEXP_LIKE(ip, '^[172]{3}\.[16]{2}\.[168]{3}\.');
    
    
    
    
    특정 조건을 제외한 결과를 출력하기
    일반적으로 ~ 가 아니다라는 뜻은 NOT을 사용한다.
    
    예시1: 영문자 대소문자가 포함되지 않는 행을 검색
    select * from t_Reg
    where not REGEXP_LIKE(text, '[a-zA-Z]');
    
    
    예시2: 숫자를 포함하지 않는 모든 행을 출력
    select * from t_reg
    where not REGEXP_LIKE(text, '[0-9]');
    
    
    사용예제5: 특수 문자 찾기
    
    다음 예제는 ! 문자가 들어가는 행을 출력
    
    예제5-1:
    select * from t_reg
    where REGEXP_LIKE(text, '!');


    예제5-2:
    select * from t_reg
    where REGEXP_LIKE(text, '?');
    
    예제5-3:
    select * from t_reg
    where REGEXP_LIKE(text, '*');

    -> ?, * 기호는 모든 것으로 해석 되기에 해당 특수 문자를 출력하기 위해선 다음과 같이 쿼리를 작성한다.
    
    예제5-4:
    select * from t_reg
    where REGEXP_LIKE(text, '\?');
    
    select * from t_reg
    where REGEXP_LIKE(text, '\*');
    
    
    예제5-5:
    select * from t_reg
    where not REGEXP_LIKE(text, '\?');
    
    
    
    6.2. REGEXP_REPLACE 함수
    이 함수는 REPLACE 함수를 확장한 개념으로 주어진 문자여레서 특정 패턴을 찾아서 주어진 다른 모양으로 치환하는 함수이다.
    
    문법:
    REGEXP_REPLACE(source_char, pattern
                                        [, replace_string
                                        [, position
                                        [, occurence
                                        [, match_param]]]
                                        )
                                        
   -> 첫 번째 인수인 source는 원본 데이터를 의미
   -> 두 번째 인수인 pattern은 찾고자 하는 패턴을 의미
   -> 세 번째 인수인 replace_string은 변환하고자 하는 패턴을 의미
   -> 네 번째 인수인 position은 검색 시작 위치를 지정
   -> 다섯 번째 인수인 occurence는 패턴과 일치가 발생하는 횟수
   -> 여섯 번째 인수인 match_parameter는 기본 ㄱ밧으로 검색되는 옵션을 변경 ( c: 대소문자를 구분해서 검색
                                                                             i: 대소문자를 구분하지 않고 검색
                                                                             m: 검색 조건을 여러 줄로 줄 수 있다.
   사용예제1: 예제 테이블 t_reg에서 숫자 부부늘 '*'기호로 전부 변경
   
   col "NO -> CHAR" FOR a20
   select text, REGEXP_REPLACE(text, '[[:digit:]]', '*') "NO ->CHAR" from t_reg;
    
   
   사용예제2: 특정 패턴을 차자서 패턴을 변경하기
   
   col "Add Char" FOR a30
   select text, REGEXP_REPLACE(text, '([0-9])', '\1-+') "Add Char"
   from t_reg;
   
   
   사용예제2: t_reg2 테이블에서 아래와 같이 ip의 .(dot) 부분을 모두 삭제하고 출력하는 예
   
   SET LINE 200
   COL no FOR 999
   COL ip FOR a20
   COL "DOT REMOVE" FOR a20
   
   select no, ip, REGEXP_REPLACE(ip, '\.','') "Dot Remove" from t_reg2;
   
   
   사용예제2-2: 첫 번쨰 dot 만 슬래쉬 기호로 변경하고 싶을 경우 아래와 가티 변경
   
   col replace for a20
   select no, ip, REGEXP_REPLACE(ip, '\.','/', 1,1) "REPLACE" FROM t_reg2;

   
   사용 예제 3: 사용자에게 입력받은 문자 가운데 공백이 여러 개 들어 있을 경우 그 공백을 제거시키는 방법
   
   SELECT REGEXP_REPLACE('aaa bbb', '(){1,}','') from dual;
   
   
   사용 예제 3-2: 
   SELECT REGEXP_REPLACE('aaa bbb', '(){2,}','') "ONE",
          REGEXP_REPLACE('aaa  bbb', '(){2,}','') "TWO"
          FROM dual;
          
   사용 예제 3-3:
   SELECT REGEXP_REPLACE('aaa bbb', '(){2,}', '*') "ONE",
          REGEXP_REPLACE('aaa  bbb', '(){2,}', '*') "TWO",
          REGEXP_REPLACE('aaa   bbb', '(){2,}', '*') "THREE"
          FROM dual;
          
   사용 예제 4: 사용자가 검색어를 입력할 때 공백 문자를 가장 먼저 입력하고 아이디 중간에도 공백이 이써서 모든 공백을 제거하기
   
   SET verify OFF
   SELECT studno, name, id from student where id=REGEXP_REPLACE('&id', '(){1,}', '');
   
   
   사용 예제 4-1: 
   select studno, name, id from student where id=REGEXP_REPLACE('&id', '(){1,}' ,'');
   
   
   사용 예제 5: 특정 문자열의 형태를 다른 형태로 바꿀 때 "20120324" 형태로 이뤄진 데이터를 "2012:03:24"의 형태로 변형하기
   
   SELECT REGEXP_REPLACE('20141023', '([[:digit:]]{4})([[:digit:]]{2})([[:digit:]]{2})' , '\1-\2-\3') from dual;
   
   
   6.3 REGEXP_SUBSTR 함수
   
   REGEXP_SUBSTR 함수는 SUBSTR 함수의 확장판으로 특정 패턴에서 주어진 문자를 추출해 내는 함수입니다.
   
   SELECT REGEXP_SUBSTR('ABC* *DEF $GHI%KJL', '[^ ] +[DEF]') from dual;
   
   
   사용 예1
   
   COL url FOR a20
   SELECT name, LTRIM(REGEXP_SUBSTR(hpage, '/([[:alnum:]]+\.?){3,4}?'), '/') "URL" from professor where hpage IS NOT NULL;
   

  사용 예2: 테이블에서 101번 학과와 201번 학과 교수들의 이름과 메일 주소의 도메인 주소를 출력하세요. 단, 메일 주소는 @ 뒤에 있는 주소만 출력하세요.
  
  예2-2:
  COL email FOR a20
  COL name FOR a20
  COL domain FOR a20
  
  예2-3:
  select name, LTRIM(REGEXP_SUBSTR(email, '@([[:alnum:]]+\.?){3,4}?'),'@') domain from professor where deptno IN (101,201) ;
  
  
  예2-4:
  COL result FOR a10
  
  Select REGEXP_SUBSTR('sys/joracle@racdb:1521:racdb', '[^:]+' , 1,3) result from dual;
  -> 주어진 문자열에서 : 기호를 기준으로 3번째의 문자열을 출력해서 racdb가 출력 되었다.
  
  예2-5:
  select REGEXP_SUBSTR('sys/oracle@racdb:1521:racdb','[^:]+',1,2) result from dual;
  
  
  예2-6:
  아래 예는 /(슬래쉬)를 기준으로 출력함
  COL result FOR a15
  select REGEXP_SUBSTR('sys/oracle@racdb:1521:rac', '[^/:]+',1,2) result from dual;
  
  
  예2-7:
  SELECT REGEXP_SUBSTR('sys/oracle@racdb:1521:rac', '[^/:]+', 1,1) result from dual;
  
  
  7. 추가로 알아야 할 정규식 함수
  
  7.1 특정 문자의 개수를 세는 REGEXP_COUNT 함수
  예제1: 주어진 문자열에서 대문자'A'가 몇개 인지 찾아주는 예
  
  set pagesize 50
  select text, REGEXP_COUNT(text, 'A') from t_reg;
  
  
  예제2: c 가 나오는 개수를 세는 예제
  select text, REGEXP_COUNT(text, 'c', 3) from t_reg;
  
  
  예제3: 
  select text, REGEXP_COUNT(text, 'c') "RESULT 1"
                    , REGEXP_COUNT(text, 'c', 1, 'i') "RESULT 2"
                    from t_reg;
  
  예제4: 아래화면은 탈출 문자(ESCAPE)를 사용하는 예를 보여줌
  
  SELECT text, REGEXP_COUNT(text, '.') RESULT1
             , REGEXP_COUNT(text, '\.') RESULT2
             from t_reg;
             
  예제5: 어떤 문자를 검색할 떄 사용하는 3가지 방법
  
  SELECT text, 
               REGEXP_COUNT(text, 'aa') RESULT1
             , REGEXP_COUNT(text, 'a{2}') RESULT2
             , REGEXP_COUNT(text, '(a)(a)') RESULT3
             from t_reg;
  
  
