6장 DML로 데이터를 관리하는 방법을 배웁니다.

앞 장의 DDL은 데이터를 담는 통 자체를 만들고 관리하는 명령이다.

1. INSERT(새로운 데이터 입력하기)

INSERT 명령어는 테이블에 새로운 데이터를 입력할 때 사용하는 명령어이다.


1.1 INSERT를 사용하여 1행씩 입력하기

문법: INSERT INTO table[(column1, column2, .... )]
      values (value 1, value 2, ...).

사용 예1

Dept2 테이블에 아래와 같은 내용으로 새로운 부서 정보를 입력하세요.

부서번호: 9000
부서명: temp_1
상위부서: 1006
지역: temp area



예시:

INSERT INTO dept2 (dcode, dname, pdept, area)
values(9000, 'temp_1', 1006, 'Temp Area');


사용 예2: 특정 컬럼에 값을 입력하기
부서번호와 부서명, 상위부서 값만 아래의 값으로 입력하세요.
부서번호: 9002
부서명: temp_3
상위부서: Business Departement(1006부서)

INSERT INTO dept2(dcode, dname, pdept)
VALUES(9002, 'temp_3', 1006);



사용 예3: 날짜 데이터 입력하기

앞에서 몇 차례 언급 된 부분이다. 윈도와 유닉스 계열은 날짜 형태가 다르므로 날짜 데이터를 입력할 때 형태를 잘 맞춰야 한다.
아래의 예는 유닉스 계열의 오라클에서 윈도용 오라클에서 사용하는 날짜 형태로 입력하는 예지이다.
아래 정보를 professor 테이블에 입력하세요.

교수번호: 5001
교수이름: James Bond
ID: Love_me
Position: a full professor
Pay: 500
입사일: 2014년 10월 23일



예시:

INSERT INTO professor (profno, name, id, position, pay, hiredate)
VALUES (5001, 'James Bond', 'Love_me', 'a full professor', 500, '2014-10-24');




사용 예4: Null 값 입력하기

* 자동 Null 값 입력하기
  데이터를 입력할 때 컬럼에 값을 입력하지 않으면 자동으로 Null 값이 들어간다.

* 수동 Null 값 입력하기
  입력할 데이터를 적는 부분에 Null을 적어주면 입력된다.



사용 예5: 음수 값 입력하기

Create table t_minus
( no1 NUMBER,
  no2 NUMBER(3),
  no3 NUMBER(3,2));


INSERT INTO t_minus VALUES( 1, 1, 1);

INSERT INTO t_minus VALUES (1.1, 1.1, 1.1);

INSERT INTO t_minus VALUES (-1.1, -1.1, -1.1);






1.2 INSERT와 서브 쿼리를 사용하여 여러 행 입력하기

이 실습을 하기 위해서 professor 테이블을 복사하여 professor3 테이블을 생성한다.

create table professor3
as
      select * from professor
      where 1 = 2;


INSERT INTO professor3
SELECT * FROM professor;




위 문장으로 여러 행을 입력할 때 Professor3 테이블에 컬럼의 개수와 데이터 형이 동일해야 하며 아래 쿼리의 2행에
where를 사용하여 원하는 조건을 줘도 되고 서브 쿼리를 사용해도 좋다.


CREATE TABLE professor4
AS
      SELECT profno, name, pay
      FROM  professor
      WHERE 1 = 2;


INSERT INTO professor4
SELECT profno, name, pay
FROM professor
WHERE profno > 4000;





1.3 INSERT ALL을 이용한 여러 테이블에 여러 행 입력하기

prof_3, prof_4 테이블을 생성하세요.


CREATE TABLE prof_3
( profno number,
  name   varchar2(25));


CREATE TABLE prof_4
( profno   NUMBER,
  name     VARCHAR2(25));





사용 예1: 다른 테이블의 데이터를 가져와서 입력하기
professor 테이블에서 교수 번호가 1000번에서 1999번까지인 교수의 번호와 교수 이름은 prof_3 테이블에 입력하고
교수 번호가 2000번에서 2999번까지인 교수의 번호와 이름은 prof_4테이블에 입력하세요.

예시

INSERT ALL
WHEN profno BETWEEN 1000 AND 1999 THEN 
      INTO prof_3 VALUES(profno, name)
WHEN profno BETWEEN 2000 AND 2999 THEN
      INTO prof_4 VALUES(profno, name)
SELECT profno, name
FROM professor;



select * from prof_3;

select * from prof_4;




사용 예2: 다른 테이블에 동시에 같은 데이터 입력하기
prof_3, prof_4 테이블의 데이터를 TRUNCATE로 삭제한 후 PROFESSOR 테이블에서 교수 번호가 3000번에서 3999번인 교수들의 교수 번호화 이름을 prof_3 테이블과 prof_4 테이블에 동시에 입력하세요.

예시

TRUNCATE TABLE prof_3;

TRUNCATE TABLE prof_4;

INSERT ALL
      INTO prof_3 VALUES (profno, name)
      INTO prof_4 VALUES (profno, name)
SELECT profno, name
FROM professor
WHERE profno BETWEEN 3000 AND 3999;






2. UPDATE(데이터 변경하기)

update 문장은 기존 데이터를 다른 데이터로 변경할 때 사용하는 방법입니다.

문법:
UPDATE table
SET column = value
WHERE 조건;



사용 예1

Professor 테이블에서 직급이 조교수(assistant professor)인 교수들의 BONUS를 200만원으로 인상하세요

UPDATE professor
SET bonus = 200
WHERE position = 'assistant professor';



사용 예2

Professor 테이블에서 'Sharon Stone'교수의 직급과 동일한 직급을 가진 교수들 중 현재 급여가 250만 원이 안 되는 교수들의 급여를 15% 인상하세요.

UPDATE professor
SET pay = pay *1.15
WHERE position = ( SELECT position
                   FROM professor
                   WHERE name = 'Sharon Stone')
AND pay < 250;





3. DELETE

DELETE 문장은 데이터를 삭제하는 구문이다.

문법:

DELETE FROM table
WHERE 조건;


사용 예
Dept2 테이블에서 부서 번호(DCODE)가 9000번에서 9999번 사이인 매장들을 삭제하세요.

DELETE FROM dept2
WHERE dcode >= 9000 AND dcode <= 9999;

-> DELETE 문은 데이터를 삭제한다고 알고 있지만 사실 데이터는 삭제되지 않고 해당 블록에 그대로 남아 있으며 특별한 툴(BBED 등)을 이용하면 DELETE된 데이터도 전부 복구할 수 있다. 그래서 delete 된 데이터를 전부 복구 가능하다.




4. MERGE

Merget란 여러 테이블의 데이터를 합치는 병합을 의미한다.
이 명령어는 문법이 다소 복잡하다.

문법:

MERGE INTO Table1
Using Table2
On(병합 조건 절)
WHEN MATCHED THEN
UPDATE SET 업데이트 내용
DELETE WHERE 조건
WHEN NOT MATCHED THEN
INSERT VALUES(컬럼 이름);

위 문법은 Table1과 Table2의 내용을 합쳐서 Table1에 모으는 것이다.
이 때 기준은 병합 조건 절이 조건이 된다.



사용 예: Merge

charge01, charge02 테이블 둘을 ch_total 테이블로 합병하라.


CREATE TABLE charge_01
( u_date VARCHAR2(6),
  cust_no NUMBER,
  u_time NUMBER,
  charge NUMBER );


CREATE TABLE charge_02
( u_date VARCHAR2(6),
  cust_no NUMBER,
  u_time NUMBER,
  charge NUMBER );




테이블 생서 후 charge_01, charge_02 테이블에 아래와 같이 데이터를 입력합시다.

INSERT INTO charge_01 VALUES
( '141001', 1000, 2, 1000);

INSERT INTO charge_01 VALUES
( '141001', 1001, 2, 1000);

INSERT INTO charge_01 VALUES
( '141001', 1002, 1, 500);




INSERT INTO charge_02 VALUES
( '141002', 1000, 3, 1500);


INSERT INTO charge_02 VALUES
( '141002', 1001, 4, 2000);


INSERT INTO charge_02 VALUES
( '141002', 1003, 1, 500);



commit;





데이터를 모을 집계용 테이블 생성

CREATE TABLE ch_total
( u_date VARCHAR2(6),
  cust_no NUMBER,
  u_time NUMBER,
  charge NUMBER );





MERGE 작업 QUERY 1(charge_01 테이블과 ch_total 테이블 병합)

MERGE INTO ch_total total
USING charge_01 ch01
ON(total.u_date = ch01.u_date)
WHEN MATCHED THEN
UPDATE SET total.cust_no = ch01.cust_no
WHEN NOT MATCHED THEN
INSERT VALUES(ch01.u_date, ch01.cust_no, ch01.u_time, ch01.charge);



MERGE 작업 QUERY 2(charge_02 테이블과 ch_total 테이블 병합)


MERGE INTO ch_total total
USING charge_02 ch02
ON(total.u_date = ch02.u_date)
WHEN MATCHED THEN
      UPDATE SET total.cust_no = ch02.cust_no
WHEN NOT MATCHED THEN
INSERT VALUES(ch02.u_date, ch02.cust_no, ch02.u_time, ch02.charge);



Merge 작업 Query 1, 2를 수행 후, mergy query1을 또 작업할 경우 에러가 발생한다.
그 이유는 total 테이블의 u_date 컬럼에 중복되는 값이 여러 개 있어서이다.




5. UPDATE 조인

다른 테이블과 조인을 하는 UPDATE에 대해서 살펴 보겠습니다.

일반적인 UPDATE: 단일 테이블

예시: 직업이 "clerk"인 사원의 급여를 10% 인상하라.

UPDATE EMP
SET SAL = (SAL + SAL*0.1)
WHERE JOB = 'CLERK';




일반적인 UPDATE 조인: WHERE 절에서 다른 테이블과 조인
부서가 DALLAS에 위치하는 부서에서 근무하는 사원의 급여를 10% 인상한다.

UPDATE EMP E
SET SAL = (SAL + SAL*0.1)
WHERE EXISTS
      (
            SELECT 1 FROM Dept D
            WHERE D.LOC='DALLAS' AND
                  E.DEPTNO = D.DEPTNO
      )
;

---> 위 쿼리는 department에 LOC이 없어서 작동 안된다.





테스트를 위한 테이블 생성


CREATE TABLE DEPT_HIST --부서발령 이력
(
      EMPNO        NUMBER(4), -- 사원번호 PK1
      APPOINTSEQNO NUMBER(4), -- 발령순번 PK2
      DEPTNO       NUMBER(2), -- 부서번호
      APPOINTDD    DATE       -- 발령일자
);



ALTER TABLE DEPT_HIST
ADD CONSTRAINT PK_DEPT_HIST PRIMARY KEY (EMPNO, APPOINTSEQNO);



테스트 데이터로 부서 번호가 20인사원 발령 부서 번호 99로 데이터를 INSERT


INSERT INTO DEPT_HIST
SELECT EMPNO, 1 APPOINTSEQNO, 99 DEPTNO, SYSDATE APPOINTDD
FROM EMP
WHERE DEPTNO=20;

COMMIT;
