4장 JOIN을 배웁니다.

관계형 데이터베이스에서 가장 핵심적인 기능인 join에 대해 배운다.



예시

emp 테이블에서 ename과 dept 테이블에서 dname 만 가져와서 새로운 결과를 만들어내라.


      문법:
      select a.col1, b.col1
          from table1 a, table2 b
          where a.col2 = b.col2;


      정답
      select a.ename, b.dname
      from emp a, dept b
      where a.deptno = b.deptno;


하지만 ANSI JOIN 문법이 있으며. Join 문법 안에 inner 라는 단어가 join 앞에 올 수 있다.
Inner 라는 뜻은 조인에 참여하는 모든 테이블에 존재하는 데이터만 출력하라는 의미이며 기본 값이다.


      ANSI 문법
      select a.col1, b.col1
      from table1 a INNER JOIN table2 b
      on a.col2 = b.col2;
      
      
      
      
1. Cartesian Product(카티션 곱)
   JOIN 에서 가장 중요한 부분은 조인 조건을 지정해 주는 부분이다.
   예를 들어 emp테이블과 dept 테이블에 가서 서로 관련 있는 데이터를 가져올 때 이 조인 조건을 보고 가져오는데.
   만약 조건을 잘못 주게 되면 틀린 데이터를 가져오거나 데이터를 가져오지 못하는 경우도 발생 할 수 있다.
   
   특히 조인 조건절을 적지 않게 되면 해당 테이블에 대한 모든 데이터를 전부 가져오는 현상이 생기는데 이를 카티션 곱이라 부른다.
   주로 join 쿼리 중에 where 절에 기술하는 join 조건이 잘못 기술 되어있거나 아예 없을 경우 발생하는 현상이다.
   
   
   테스트를 위해 테이블 3개 생성
   
   step1: 테스트용 테이블 cat_a, cat_b, cat_c를 생성하고 데이터를 입력한다.
   
   CREATE TABLE cat_a (no number, name VARCHAR2(1)); # 첫 번째 테이블 생성
   
   INSERT INTO cat_a VALUES (1,'A');
   
   INSERT INTO cat_a VALUES (2,'B');
   
   CREATE TABLE cat_b (no number, name VARCHAR2(1)); # 두 번째 테이블 생성
   
   INSERT INTO cat_b VALUES (1,'C');
   
   INSERT INTO cat_b VALUES (2,'D');
   
   CREATE TABLE cat_c (no number, name VARCHAR2(1)); # 세 번째 테이블 생성
   
   INSERT INTO cat_c VALUES (1, 'E');
   
   INSERT INTO cat_c VALUES (1, 'F');
   
   commit;
   
   
   step2: 생성된 테이블을 확인한다.
   
   COL name FOR a5;
   
   SELECT * FROM cat_a;
   
   SELECT * FROM cat_b;
   
   SELECT * FROM cat_c;
   
   
   
   step3: 2개의 테이블로 정상적인 조인을 수행한다.
   
   select a.name, b.name
   from cat_a a, cat_b b
   where a.no = b.no;
   
   
   
   step4: 2개의 테이블로 카티션 곱을 생성한다.
   
   select a.name, b.name
   from cat_a a, cat_b b
   ;
   
   step5: 3개의 테이블로 정상적인 조인을 수행한다.
   
   select a.name, b.name, c.name
   from cat_a a, cat_b b, cat_c c
   where a.no= b.no 
   and a.no = c.no;
   
   
   step6: 3개의 테이블을 조회하되, 조인 조건절은 2개의 테이블의 조건만으로 카티션 곱을 생성
   
   select a.name, b.name, c.name
   from cat_a a, cat_b b, cat_c c
   where a.no = b.no;
   
   
   
   카티션 곱을 사용하는 이유가 크게 두가지가 있다.
   첫번째: 데이터를 복제하여 원본 테이블을 반복하여 읽는 것을 피하기 위함
   두번째: 실수로 조인 조건 컬럼 중 일부를 빠뜨린 경우
   
   
   
   데이터 복제 예시
   step1: 부서 번호가 10번인 사원들의 정보를 조회
   
   select empno, ename, job, sal
   from emp
   where deptno=10;
   
   
   step2: 임의의 3건을 추출한다.
   
   select level c1 from dual connect by level <=3;
   
   
   step3: 카티션 곱을 사용하여 부서 번호 10번인 집합 3세트를 만든다.
   
   select * from
   (
    select empno, ename, job, sal
    from emp
    where deptno =10
   ), (select level c1 from dual connect by level <=3);
   
   
   
   
   
   참고
   
   break on은 sqlplus 툴의 옵션으로 중복된 값은 한 번만 보여 주는 기능이다.
   
   break ON empno;
   
   
   
   select empno,
          case when c1 = 1 then 'ename'
               when c1 = 2 then 'job'
               when c1 = 3 then 'hiredate'
          end title,
          case when c1 = 1 then ename
               when c1 = 2 then job
               when c1 = 3 then hiredate
          end contents
           from
   (
    select empno, ename, job, sal, to_char(hiredate, 'YYYY/MM/DD') hiredate
    from emp
    where deptno =10
   ), (select level c1 from dual connect by level <=3)
   order by 1, 2;
   
   
   만약 emp 테이블이 1만 건이고 dept 테이블이 100건일 때 카티션 곱으로 100만 건이 출력된다... 실수로 조인 조건이 빠질 경우
   100만 건을 애플리케이션으로 보내고 추출된 건수에 대한 사이즈 제약을 하지 않으면 애플리케이션이 메모리 부족으로 다운 될 수 있다.
   쿼리가 복작하고 조인 컬럼 개수가 많을 경우 이런 실수가 발생하니 조심해야한다.
   
   
   
   
 2. EQUI join(등가 조인)
    이 조인 방법은 가장 많이 사용되는 조인으로 선행 테이블에서 데이터를 가져온 후 조인 조건절을 검사해서 동일한 조건을 가진 데이터를 후행 테이블에서
    꺼내오는 방법이다.
    
    
    사용 예1: emp 테이블과 dept 테이블을 조회하여 아래와 같이 출력하라
    
    select empno, ename, dname
    from emp e, dept d
    where e.deptno = d.deptno;
    
    
    [ORACLE JOIN 문법] 예시:
    
    select empno, ename, dname
    from emp e, dept d
    where e.deptno = d.deptno;
    
    
    [ANSI JOIN 문법] 예시:
    
    select empno, ename, dname
    from emp e JOIN dept d
    ON e.deptno = d.deptno; 
 
   
   
    사용 예2: 학생 테이블(student)와 교수 테이블(professor)을 조인하여 학생의 이름과 지도교수 이름을 출력하라.
    
    [ORACLE JOIN 문법]
    
    select s.name AS STU_NAME, p.name AS PRO_NAME
    from student s, professor p
    where s.profno = p.profno;
  
  
    [ANSI JOIN 문법]
    
    select s.name AS STU_NAME, p.name AS PRO_NAME
    from student s JOIN professor p
    ON s.profno = p.profno;
    
    
    -> 해당 쿼리문으로는 20개가 출력되어야할 레코드가 15개만 출력되는데 그 이유는 학생 5명이 지도교수가 결정이 안되어서 결과에서 빠진 상태이다.
       이렇게 한쪽에 없는 데이터를 가진 값까지 다 보고 싶으면 뒷부분에서 배우는 outer join을 활용하면 된다.
       
    
    
    사용 예3: 학생 테이블(student)와 학과 테이블(department), 교수 테이블(professor)을 JOIN하여 학생의 이름과 학생의 학과 이름, 학생의 지도교수 이름을 출력하라.
    
    
    [ORACLE JOIN 문법]
    select s.name AS STU_NAME, d.dname AS DEPT_name, p.name AS PROF_NAME
    from student s, department d, professor p
    where s.deptno1 = d.deptno
    AND s.profno = p.profno;
    
    
    [ANSI JOIN 문법]
    select s.name AS stu_name, d.dname AS DEPT_name, P.name AS PROF_NAME
    FROM student s JOIN department d
    ON s.deptno1 = d.deptno
    JOIN professor p
    ON s.profno = p.profno;
    
    
    
    사용 예4: student 테이블을 조회하여 1전공(deptno1)이 101번인 학생들의 이름과 각 학생들의 지도교슈 이름을 출력하세요.
    
    [ORACLE JOIN 문법]
    
    select s.name as STU_NAME, p.name "PROF_NAME"
    from student s, professor p
    where s.profno = p.profno
    and s.deptno1 = 101;
    
    
    [ANSI JOIN 문법]
    
    select s.name AS STU_NAME, p.name AS PROF_NAME
    from student s JOIN professor p
    ON s.profno = p.profno
    WHERE s.deptno1 = 101;



3. Non-Equi Join(비등가 조인)

   같은 조건이 아닌 크거나 작거나 하는 경우의 조건에도 조회가 필요할 경우 Non-Equi Join을 사용한다.
   
   예시1: customer 테이블과 gift 테이블을 Join하여 고객별로 마일리지 포인트를 조회한 후 해당 마일리지 점수로 받을 수 있는 상품을 조회하여 고개그이 이름과 받을 수 있는 상품 명을 아래와 같이 출력하세요.
   
   
   [ORACLE JOIN 구문]
   
   select c.gname as CUST_NAME, TO_CHAR(c.point, '999,999') as POINT, g.gname as GIFT
   from customer c, gift g
   where c.point BETWEEN g.g_start AND g.g_end;
   
   
   [ANSI JOIN 구문]
   
   select c.gname "CUST_NAME", TO_CHAR(c.point, '999,999') "Point", g.gname "GIFT"
   from cusotmer c JOIN gift g
   ON c.point BETWEEN g.g_Start AND g.g_end;
   
   
   oracle과 ansi 조인 구문에서 between을 썼지만 비교 연산자를 사용하는 것이 성능에는 더 좋다.
   
   
   ansi join 구문 예시:
   
   select c.gname as CUST_NAME, TO_CHAR(c.point, '999,999') as Point, g.gname as GIFT
   from  customer c Join gift g
   ON c.point >= g.g_start
   AND c.point <= g.g_end;
   
   
   
   사용예2: Student 테이블과 score 테이블, hakjum 테이블을 조회하여 학생들의 이름과 점수와 학점을 출력하세요.
   
   [ORACLE JOIN 구문]
   
   SELECT s.name "STU_NAME", o.total "SCORE", h.grade "CREDIT"
   FROM student s, score o, hakjum h
   WHERE s.studno = o.studno
   AND o.total >= h.min_point
   AND o.total <= h.max_point;
   
   
   [ANSI JOIN 구문]
   
   SELECT s.name "STU_NAME", o.total "SCORE", h.grade "CREDIT"
   FROM student s JOIN score o
   ON s.studno = o.studno
   JOIN hakjum h
   ON o.total >= h.min_point
   AND o.total <= h.max_point;
   
   
   
   마지막으로 equi join, non-equi join의 공통점은 조회하려는 데이터들이 join 에 참여하는 모든 테이블에 데이터가 존재하는 경우에 결괏 값을 출력
   그래서 INNER JOIN이라고 한다.
   
   
   
   
   4. OUTER JOIN(아우터 조인)
   
   Inner 조인과 반대로 한쪽 테이블에는 데이터가 있고 한쪽 테이블에 없는 경우에 데이터가 있는 쪽 테이블의 내용을 전부 출력하게 하는 방법이다.
   모든 데이터를 출력할 수 있어 좋을 수 있으나 DB 성능에 악 영향을 줄 수 있기에 며심하고 사용 여부에 신중해야한다.
   
   
   사용 예1: student 테이블과 professor 테이블을 Join하여 학생 이름과 지도교수 이름을 출력하세요. 단, 지도교수가 결정되지 않은 학생의 명단도 함께 출력하세요.
   
   [Oracle Outer Join 문법]
   
   select s.name "stu_name", p.name "prof_name"
   from student s, professor p
   where s.profno = p.profno(+);
   
   
   [ANSI OUTER Join 문법]
   
   SELECT s.name as STU_NAME, p.name as PROF_name
   from student s LEFT OUTER JOIN professor p
   ON s.profno=p.profno;
   
   
   
   사용 예2: student 테이블과 professor 테이블을 Join 하여 학생 이름과 지도교수 이름을 출력하세요. 단, 지도학생이 결정되지 않은 교수의 명단도 함께 출력하세요.
   
   [ORACLE OUTER JOIN 문법]
   
   SELECT s.name "STU_NAME", p.name "PROF_NAME"
   FROM student s, professor p
   WHERE s.profno(+) = p.profno;
   
   [ANSI OUTER JOIN 문법]
   
   select s.name "STU_NAME", p.name "PROF_NAME"
   FROM student s RIGHT OUTER JOIN professor p
   ON s.profno = p.profno;
   
   
   
   사용 예3: student 테이블과 professor 테이블을 Join하여 학생 이름과 지도교수 이름을 출력하세요. 단, 지도학생이 결정 안 된 교수 명단과 지도교수가 결정 안 된 학생 명단을 한꺼번에 출력하세요.
   
   [ORACLE OUTER JOIN 문]
   
   SELECT s.name "STU_NAME", p.name "PROF_NAME"
   from student s, professor p
   where s.profno(+) = p.profno
   UNION
   SELECT s.name "STU_NAME", p.name "PROF_NAME"
   FROM student s, professor p
   where s.profno = p.profno(+)
   
   
   [ANSI FULL OUTER JOIN 문법]
   
   select s.name "STU_NAME", p.name "PROF_NAME"
   from student s FULL OUTER JOIN professor p
   ON s.profno = p.profno;
   
   
   
   
   ORACLE OUTER JOIN 주의사항!
   
   오라클 아우터 조인은 WHERE 절의 아우터 조인이 되는 컬럼들에 대해서는 전부 아우터 조인 연산자(+)를 붙여야 합니다. 만약, 하나라도 빠진다면 결과는 일반 조인과 동일 하게 되어 원하지 않는 데이터를 추출하게 됩니다.
   
   select d.deptno, d.dname, d.loc, e.empno, e.ename, e.sal
   from dept d, emp e
   where d.deptno = e.deptno(+)
   and e.deptno(+) = 20
   order by 1
   ;
   
   
   ANSI OUTER JOIN 주의사항!
   
   ON 절과 WHERE 절의 의미를 반드시 확인해야 합니다.
   
   
   
   5. SELF JOIN
   
   원하는 데이터가 하나의 테이블에 다 들어 있는 경우
   
   [Oracle JOin 문법]
   
   select e1.ename as ENAME, e2.ename as MGR_ENAME
   from emp e1, emp e2
   where e1.mgr = e2.empno;
   
   
   [ANSI JOIN 문법]
   
   select e1.ename as ENAME, e2.ename AS MGR_ENAME
   from emp e1 join emp e2
   on e1.mgr = e2.empno;
   
   
   
  
  
  
   연습문제
   1. 학생 테이블(student)과 학과 테이블(department)을 사용하여 학생이름, 1전공 학과 번호(deptno1),
      1전공 학과 이름을 출력하세요(ANSI JOIN 문법과 ORACLE Join 문법으로 각각 SQL을 작성하세요).
      
      
      
                Student
                      STUDNO NAME  ID                                            GRADE
            ---------- ----- ---------------------------------------- ----------
            JUMIN                      BIRTHDAY TEL
                 HEIGHT
            -------------------------- -------- ------------------------------ ----------
                WEIGHT    DEPTNO1    DEPTNO2     PROFNO



                Department
                    DEPTNO
            ----------
            DNAME
            --------------------------------------------------------------------------------
                  PART BUILD
            ---------- ------------------------------------------------------------



  정답
   select s.name as STU_NAME, s.deptno1, d.DNAME
   from student s, department d
   where s.deptno1 = d.deptno;


 
 2. emp2 테이블과 p_grade 테이블을 조회하여 현재 직급이 있는 사원의 이름과 직급, 현재 연봉, 해당 직급의 연봉의 하한 금액과 상한 금액을 아래 결과 화면과 같이 출력하시요.
 
            emp2 table
                 EMPNO NAME  BIRTHDAY DEPTNO
                  ---------- ----- -------- ------------
                  EMP_TYPE
                  ------------------------------------------------------------
                  TEL
                  ------------------------------
                  HOBBY
                    PAY
                  ------------------------------------------------------------ ----------
                  POSITION                                                         PEMPNO
                  ------------------------------------------------------------ ----------
                  
                  
             
            p_grade table
                  POSITION
                  S_AGE
                  ------------------------------------------------------------ ----------
                       E_AGE     S_YEAR     E_YEAR      S_PAY      E_PAY
                  ---------- ---------- ---------- ---------- ----------
                  
            
            정답:
            
            SELECT e.name AS name, e.position AS position, e.PAY as PAY, p.S_PAY as LOW_PAY, p.E_PAY as HIGH_PAY
            from emp2 e, p_grade p
            where e.position = p.position;
            
            [ANSI JOIN 문 정답]
            
            SELECT e.name, e.position, e.PAY, p.S_PAY, p.E_PAY
            FROM emp2 e
            INNER JOIN p_grade p ON e.position = p.position;

            
            
            
            3. EMP2 테이블과 p_grade 테이블을 조회하여 사원들의 이름과 나이, 현재 직급, 예상 직급을 출력하세요.
            예상 직급은 나이로 계산하여 해당 나이가 받아야 하는 직급을 의미합니다. 나이는 오늘 (sysdate)를 기준으로 하되 trunc 소수점 이하는 절삭해서 계산하세요.
            정답:           
            SELECT e.name, TRUNC((SYSDATE - e.birthday) / 365) AS age, e.position AS current_position, p.position AS expected_position
            FROM emp2 e
            INNER JOIN p_grade p ON TRUNC((SYSDATE - e.birthday) / 365) BETWEEN p.S_AGE AND p.E_AGE;
         
                 
                 
                 
            4. customer 테이블과 gift 테이블을 Join하여 고객이 자기 포인트보다 낮은 포인트의 상품 중 한가지를 선택할 수 있다고 할 때
               notebook을 선택할 수 있는 고객명과 포인트, 상품명을 출력하세요.
               
               
               
               customer table
               
                  GNO GNAME
                  ---------- ------------------------------------------------------------
                  JUMIN                           POINT
                  -------------------------- ----------
 


              gift table
              
                  GNO GNAME
                  ---------- ------------------------------------------------------------
                     G_START      G_END
                  ---------- ----------
                  
              
              정답:
              select c.GNAME as CUST_NAME, c.POINT as POINT, g.GNAME as GIFT_NAME
              from customer c, gift g
              where c.point >= g.G_START 
              AND g.gname = 'Notebook';
              
              
              
              
              
              5. professor 테이블에서 교수의 번호, 교수 이름, 입사일, 자신보다 입사일 빠른 사람 인원수를 출력하세요.
                 단, 자신보다 입사일이 빠른 사람 수를 오름차순으로 출력하세요.(ORACLE JOIN 구문과 ANSI JOIN 구문으로 각각 SQL을 작성하라)
                 
                 
                 ORACLE 정답:
                 
                 SELECT p1.profno as PROFNO, p1.name as NAME, p1.hiredate as HIREDATE,
                         COUNT(p2.profno) AS Count
                  FROM professor p1, professor p2
                  WHERE p1.hiredate > p2.hiredate
                  GROUP BY p1.profno, p1.name, p1.hiredate
                  ORDER BY Count ASC;


                  ANSI 정답:
                  
                  SELECT p1.profno as PROFNO, p1.name as NAME, p1.hiredate as HIREDATE,
                         COUNT(p2.profno) AS Count
                  FROM professor p1 JOIN professor p2
                  ON p1.hiredate > p2.hiredate
                  GROUP BY p1.profno, p1.name, p1.hiredate
                  ORDER BY Count ASC;
                  
                  
               
               6. emp 테이블에서 사원번호, 사원이름, 입사일, 자신보다 먼저 입사한 사람 인원수를 출력하세요.
                  단, 자신보다 입사일이 빠른 사람수를 오름차순으로 출력하세요.
                  
                  
                  ORACLE 정답:
                  select e1.empno, e1.ename, e1.hiredate,
                        count(e2.empno) as count
                  from emp e1, emp e2
                  where e1.hiredate > e2.hiredate
                  GROUP BY e1.empno, e1.ename, e1.hiredate
                  ORDER BY Count ASC;
                  
                  
                  
                  ANSI 정답:
                  SELECT e1.empno, e1.ename, e1.hiredate,
                         COUNT(e2.empno) AS Count
                  FROM emp e1
                  JOIN emp e2 ON e1.hiredate > e2.hiredate
                  GROUP BY e1.empno, e1.ename, e1.hiredate
                  ORDER BY Count ASC;
